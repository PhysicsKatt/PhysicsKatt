{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d2c2347a-a266-44f4-af3d-184752a7a658",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import packages\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "from tensorflow.keras import layers\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "# load data\n",
    "m4_dat = pd.read_fwf('NGC6121-1.dat',  names=['source_id', 'ra', 'dec', 'phot_g_mean_mag'])\n",
    "gia = pd.read_csv('m4_gaia_source.csv')\n",
    "\n",
    "# prepare gia data for use\n",
    "params = ['ra', 'dec']                                        # choose ra and dec columns from gia \n",
    "gia_params = np.array(gia[params])\n",
    "\n",
    "NA = np.any(np.isnan(gia_params), axis = 1)                  # remove NA entries from selected gia data\n",
    "gia_params = gia_params[~NA]\n",
    "\n",
    "scalar = StandardScaler()                                     # ensure that all gia data entries are scalars\n",
    "gia_params = scalar.fit_transform(gia_params)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "cd7f80ab-4feb-4daa-9cd9-1b3a4fe1945e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-05-19 20:59:20.538458: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory\n",
      "2022-05-19 20:59:20.538637: W tensorflow/stream_executor/cuda/cuda_driver.cc:269] failed call to cuInit: UNKNOWN ERROR (303)\n",
      "2022-05-19 20:59:20.538699: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (291c97ae9296): /proc/driver/nvidia/version does not exist\n",
      "2022-05-19 20:59:20.539145: I tensorflow/core/platform/cpu_feature_guard.cc:142] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  SSE4.1 SSE4.2 AVX\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n",
      "2022-05-19 20:59:20.668221: I tensorflow/compiler/mlir/mlir_graph_optimization_pass.cc:185] None of the MLIR Optimization Passes are enabled (registered 2)\n"
     ]
    }
   ],
   "source": [
    "# 410 PART\n",
    "# create input training and testing data\n",
    "size = gia_params.shape[0]                           \n",
    "test_frac = 0.1\n",
    "\n",
    "test_sel = np.random.choice([True, False], size = size, p = [test_frac, 1-test_frac])\n",
    "\n",
    "input_train = gia_params[~test_sel]\n",
    "input_test = gia_params[test_sel]\n",
    "\n",
    "# create output training and testing data\n",
    "m4 = gia['source_id'].isin(m4_dat.source_id)              # select only entries appearing in both data sets\n",
    "\n",
    "output = np.column_stack([~m4, m4]).astype(int)[~NA]\n",
    "\n",
    "output_train = output[~test_sel]\n",
    "output_test = output[test_sel]\n",
    "\n",
    "# create network layers\n",
    "net = tf.keras.Sequential()\n",
    "\n",
    "net.add(layers.Flatten(input_shape = gia_params.shape[1:]))\n",
    "net.add(layers.Dense(10, activation = 'relu'))\n",
    "net.add(layers.Dense(10, activation = 'relu'))\n",
    "net.add(layers.Dense(output.shape[1], activation = 'softmax'))\n",
    "\n",
    "net.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])\n",
    "\n",
    "# train and test the network\n",
    "model_info = net.fit(input_train, output_train, batch_size = 32, epochs = 10, verbose = 0, validation_data = (input_test, output_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2eb8628a-7cba-4b16-86b6-e27f5a79c863",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training accuracy: [0.9599510431289673, 0.9612147212028503, 0.9612371921539307, 0.961196780204773, 0.9613044857978821, 0.9612506628036499, 0.9613224864006042, 0.9614010453224182, 0.9613112211227417, 0.9613853096961975]\n",
      "Validation accuracy: [0.9612258672714233, 0.9598309993743896, 0.9612258672714233, 0.9592043161392212, 0.9612258672714233, 0.9612258672714233, 0.9612258672714233, 0.9598714113235474, 0.9612258672714233, 0.9612258672714233]\n"
     ]
    }
   ],
   "source": [
    "# training and validation accuracies\n",
    "info = model_info.history\n",
    "\n",
    "print(\"Training accuracy:\", info['accuracy'])\n",
    "print(\"Validation accuracy:\", info['val_accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0351cddd-08b4-49ea-ae23-a9ca20a18d0b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# visualize the training \n",
    "fig, ax = plt.subplots(2, 1, figsize = (6, 8))\n",
    "\n",
    "# look at the learning loss compared to the validation loss\n",
    "ax[0].plot(info['loss'], color = 'darkblue', label = 'Training Loss')\n",
    "ax[0].plot(info['val_loss'], color = 'magenta', label = 'Validation Loss')\n",
    "ax[0].set_title('Training and Validation Loss')\n",
    "ax[0].set_xlabel('Epoch')\n",
    "ax[0].set_ylabel('Percent Loss')\n",
    "ax[0].legend();\n",
    "\n",
    "# look at the learning accuracy compared to the validation accuracy\n",
    "ax[1].plot(info['accuracy'], color = 'darkblue', label = 'Training Accuracy')\n",
    "ax[1].plot(info['val_accuracy'], color = 'magenta', label = 'Validation Accuracy')\n",
    "ax[1].set_title('Training and Validation Accuracy')\n",
    "ax[1].set_xlabel('Epoch')\n",
    "ax[1].set_ylabel;('Percent Accuracy')\n",
    "ax[1].legend();\n",
    "\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "812c4544-a638-476d-ba7a-36d4a8948684",
   "metadata": {},
   "source": [
    "1. In every run of the model my training accuracies are almost constant, and in this run it starts at 0.9599 and only increases to 0.9614. Also in every run of the model the validation accuracies are almost constant or constant. In this run the validation accuracy stays constant at 0.9612. Because the training accuracy of this model does not significantly increase with successive training epochs this model does not learn well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d9496081-23bc-481e-b8f8-87a243cbdfc8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1546/1546 [==============================] - 2s 2ms/step - loss: 0.0771 - accuracy: 0.9612\n"
     ]
    }
   ],
   "source": [
    "# predict m4 stars using the test set\n",
    "class_pred = net.predict(input_test)\n",
    "\n",
    "m4_pred = np.argmax(class_pred, axis = 1)\n",
    "\n",
    "# get the testing accuracy\n",
    "test_ac = net.evaluate(input_test, output_test, batch_size = 32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b541c8c1-0d2d-49ba-98ed-6c43af78adf4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# confirm that I have potential m4 stars\n",
    "plt.hist(class_pred[:,1], color = 'mediumturquoise')\n",
    "plt.title('Probability of an m4 Star')\n",
    "plt.xlabel('Probability')\n",
    "plt.ylabel('Counts');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "453f8b95-cfee-4225-b74b-adab41fb42be",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "49466"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(class_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c355b55b-6a66-41e9-980e-9d67cecf46a0",
   "metadata": {},
   "source": [
    "2) This model has very little confidence in the points that it classifies as m4 stars because, of the 49466 stars that the model says are m4 stars, > 40000 of those stars have < 10% chance of actaully being an m4 star, and < 5000 stars are classified as an m4 star with > 40% probability. The fact that the model does not confidenty predict that any stars are m4 stars is not surprising because the plot titled \"Training and Validation Accuracy\" shows that the model is not robustly learning."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "f9a74329-962d-4432-97c9-4b1ce2b5a429",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 99.95 %\n",
      "1 0.05 %\n",
      "Best guess: 0\n",
      "Truth class: [1 0]\n"
     ]
    }
   ],
   "source": [
    "# look at some of the test set predictions\n",
    "h = np.random.randint(len(input_test))\n",
    "\n",
    "for i, p in enumerate(class_pred[h]):\n",
    "    print(i, round(p*100, 2), '%')\n",
    "    \n",
    "best_guess = np.argmax(class_pred[h])\n",
    "print('Best guess:', best_guess)\n",
    "\n",
    "print(\"Truth class:\", output_test[h])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "d5a7061a-019b-4cde-9531-5fff86ce5c4f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 67.9 %\n",
      "1 32.1 %\n",
      "best guess: 0\n",
      "Truth class: [0 1]\n"
     ]
    }
   ],
   "source": [
    "# make a horizontal shift to the inputs to check the model's predictive capabilities\n",
    "k = np.random.randint(len(input_test))\n",
    "\n",
    "x = input_test[k]\n",
    "x = np.roll(x, 10, axis=0)\n",
    "\n",
    "pred = net.predict(x[np.newaxis, ...])\n",
    "\n",
    "for i, p in enumerate(pred[0]):\n",
    "    print(i, round(p*100, 2), '%')\n",
    "    \n",
    "best_guess = np.argmax(pred)\n",
    "print('best guess:', best_guess)\n",
    "print(\"Truth class:\", output_test[k]);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee21119e-b566-43a2-99fa-3915d3ad697e",
   "metadata": {},
   "source": [
    "3. This model is supposed to be learning how to identify an m4 star using its right ascention and declenation. As previously mentioned, the plot \"Training and Validation Accuracy\" shows that the model does not gain accuracy as it trains, and therefore it is not learning much. To see if the model is learning something about sky positions of m4 stars I visualized some of the test set predictions; then I made a horizontal shift to the test data and made new predictions on the shifted data set. Making a shift of 1 does not effect the predictions, but a shift of 10 changes the model's confidence about its class predictions which sometimes leads to misclassification. Since the test predictions are affected by spatial transformations I can conlcude that the model is learning something about right ascention and declenation of m4 stars like I want it to."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7082b84-7c51-46f0-84c6-4456e53dc55f",
   "metadata": {},
   "source": [
    "4) I do not think that a more sophsticated DNN model (i.e. more layers or more nodes per layer) could do a better job of classifying the data than this model does. The training data only contains information about right ascention and declenation, and only so much can be extracted from this information. This model learns all it can from these two parameters, and a more complex model only increases the likelihood that the model will overfit the data and lose predictive capabilities."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c97f5a8b-cfb1-4e58-8204-0cc266c99ab5",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-05-19 22:28:58.878981: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory\n",
      "2022-05-19 22:28:58.879063: W tensorflow/stream_executor/cuda/cuda_driver.cc:269] failed call to cuInit: UNKNOWN ERROR (303)\n",
      "2022-05-19 22:28:58.879101: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (291c97ae9296): /proc/driver/nvidia/version does not exist\n",
      "2022-05-19 22:28:58.879488: I tensorflow/core/platform/cpu_feature_guard.cc:142] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  SSE4.1 SSE4.2 AVX\n",
      "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\n",
      "2022-05-19 22:28:59.008309: I tensorflow/compiler/mlir/mlir_graph_optimization_pass.cc:185] None of the MLIR Optimization Passes are enabled (registered 2)\n"
     ]
    }
   ],
   "source": [
    "# 510 PART\n",
    "# import packages\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "from tensorflow.keras import layers\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "# load data\n",
    "m4_dat = pd.read_fwf('NGC6121-1.dat',  names=['source_id', 'ra', 'dec', 'phot_g_mean_mag'])\n",
    "gia = pd.read_csv('m4_gaia_source.csv')\n",
    "\n",
    "# prepare gia data for use\n",
    "new_params = ['ra', 'dec', 'parallax', 'pm', 'pmra', 'pmdec']                                        # choose ra and dec columns from gia \n",
    "new_gia_params = np.array(gia[new_params])\n",
    "\n",
    "NA2 = np.any(np.isnan(new_gia_params), axis = 1)                  # remove NA entries from selected gia data\n",
    "new_gia_params = new_gia_params[~NA2]\n",
    "\n",
    "scalar = StandardScaler()                                     # ensure that all gia data entries are scalars\n",
    "new_gia_params = scalar.fit_transform(new_gia_params)\n",
    "\n",
    "# create input training and testing data\n",
    "size2 = new_gia_params.shape[0]                           \n",
    "test_frac = 0.1\n",
    "\n",
    "test_sel2 = np.random.choice([True, False], size = size2, p = [test_frac, 1-test_frac])\n",
    "\n",
    "input_train2 = new_gia_params[~test_sel2]\n",
    "input_test2 = new_gia_params[test_sel2]\n",
    "\n",
    "# create output training and testing data\n",
    "m4 = gia['source_id'].isin(m4_dat.source_id)              # select only entries appearing in both data sets\n",
    "\n",
    "output2 = np.column_stack([~m4, m4]).astype(int)[~NA2]\n",
    "\n",
    "output_train2 = output2[~test_sel2]\n",
    "output_test2 = output2[test_sel2]\n",
    "\n",
    "# create network layers\n",
    "net2 = tf.keras.Sequential()\n",
    "\n",
    "net2.add(layers.Flatten(input_shape = new_gia_params.shape[1:]))\n",
    "net2.add(layers.Dense(10, activation = 'relu'))\n",
    "net2.add(layers.Dense(10, activation = 'relu'))\n",
    "net2.add(layers.Dense(output2.shape[1], activation = 'softmax'))\n",
    "\n",
    "net2.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy', 'FalsePositives'])\n",
    "\n",
    "# train and test the network\n",
    "model_info2 = net2.fit(input_train2, output_train2, batch_size = 32, epochs = 10, verbose = 0, validation_data = (input_test2, output_test2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "69379c6b-ff30-46ed-8115-3ca5ded0543c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training accuracy: [0.9830942749977112, 0.9873297810554504, 0.9875280261039734, 0.9876062273979187, 0.9876871705055237, 0.987567126750946, 0.9877625703811646, 0.9876592755317688, 0.9877123236656189, 0.987765371799469]\n",
      "Validation accuracy: [0.9881662726402283, 0.9882921576499939, 0.9879900217056274, 0.9878641366958618, 0.9877886176109314, 0.9892740845680237, 0.9886950254440308, 0.9886950254440308, 0.9883173704147339, 0.9884432554244995]\n"
     ]
    }
   ],
   "source": [
    "# training and validation accuracies\n",
    "info2 = model_info2.history\n",
    "\n",
    "print(\"Training accuracy:\", info2['accuracy'])\n",
    "print(\"Validation accuracy:\", info2['val_accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "50350ed4-c692-4151-9ac1-50627cd6babe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# visualize the training \n",
    "fig, ax = plt.subplots(2, 1, figsize = (6, 8))\n",
    "\n",
    "# look at the learning loss compared to the validation loss\n",
    "ax[0].plot(info2['loss'], color = 'darkblue', label = 'Training Loss')\n",
    "ax[0].plot(info2['val_loss'], color = 'magenta', label = 'Validation Loss')\n",
    "ax[0].set_title('Training and Validation Loss')\n",
    "ax[0].set_xlabel('Epoch')\n",
    "ax[0].set_ylabel('Percent Loss')\n",
    "ax[0].legend();\n",
    "\n",
    "# look at the learning accuracy compared to the validation accuracy\n",
    "ax[1].plot(info2['accuracy'], color = 'darkblue', label = 'Training Accuracy')\n",
    "ax[1].plot(info2['val_accuracy'], color = 'magenta', label = 'Validation Accuracy')\n",
    "ax[1].set_title('Training and Validation Accuracy')\n",
    "ax[1].set_xlabel('Epoch')\n",
    "ax[1].set_ylabel;('Percent Accuracy')\n",
    "ax[1].legend();\n",
    "\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51028ad0-32ac-49e2-8d56-3eec243b0c58",
   "metadata": {},
   "source": [
    "I chose to include parallax, pm, pmra, and pmdec in my training set because pm measures the observed changes in location of a celestial body, pmra measures the proper motion in right ascention, and pmdec measures proper motion in declenation. I chose to include all three pm measurements because pmra and pmdec measure proper motion in the directions that I am using to define the spatial locations of each m4 star so including these measurements should produce more confident model predictions because they allow me to give the model specific location information and how that location can vary. Using these new data parameters my new network achieves a training accuracy of between 0.9831 and 0.9878 and a validation accuracy of between 0.9882 and 0.9884. This model acheives a higher training and validation accuracy than the more simplistic model does, and the training accuracy drastically increases from its starting position which means that the model is actually learning something."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a3e57146-c317-4ed5-8adb-c746c9c3f574",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1242/1242 [==============================] - 3s 2ms/step - loss: 0.0280 - accuracy: 0.9884 - false_positives: 459.0000\n"
     ]
    }
   ],
   "source": [
    "# predict m4 stars using the test set\n",
    "class_pred2 = net2.predict(input_test2)\n",
    "\n",
    "m4_pred2 = np.argmax(class_pred2, axis = 1)\n",
    "\n",
    "# get the testing accuracy\n",
    "test_ac2 = net2.evaluate(input_test2, output_test2, batch_size = 32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e35b0408-e0ff-4bd2-b830-e1d64cc75966",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# confirm that I have potential m4 stars\n",
    "plt.hist(class_pred2[:,1], color = 'mediumturquoise')\n",
    "plt.title('Probability of an m4 Star')\n",
    "plt.xlabel('Probability')\n",
    "plt.ylabel('Counts');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "5ebb4ade-55a8-4f4b-ad8c-922a1ae174f2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The model misclassifies 193 test inputs with a probability > 80%\n"
     ]
    }
   ],
   "source": [
    "# save all misclassified test inputs to arrays\n",
    "pr = []\n",
    "c = []\n",
    "\n",
    "for j in range(len(input_test2)):                     #once for every entry in input_test2\n",
    "    best_guess = np.argmax(class_pred2[j])            # make a max prediction for that entry \n",
    "\n",
    "    if best_guess != output_test2[j][1]:              # if that max prediction doesn't equal the test output              \n",
    "        for i, p in enumerate(class_pred2[j]):        # for each class and probability in the test input\n",
    "            pr.append(np.round(p*100, 2))             # append the probability to an array\n",
    "            c.append(i)                               # append the class to an array \n",
    "\n",
    "# create a data frame for each misclassified input\n",
    "d = {'class': c, 'prob': pr}\n",
    "cp = pd.DataFrame(d)\n",
    "#print(cp)\n",
    "\n",
    "# find the number of misclassified inputs with a probability greater than 80%\n",
    "conf_misclass = np.count_nonzero(cp['prob'] > 80.00)                              #count each prob value > 80%\n",
    "print('The model misclassifies', conf_misclass, 'test inputs with a probability > 80%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "7135be84-05d7-4d90-8249-afe29634e5d8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(39717, 918)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(class_pred2), len(cp)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6aee9872-6a26-4a96-8676-eb02bf052e63",
   "metadata": {},
   "source": [
    "The more informed model predicts that over 35000 stars belong to m4 with <= 10% probabilty so this model is not very confident that it is identifying most stars correctly. Despite this, the model is able to classify < 5000 stars as belonging to m4 with a probability > 80%, so this model is performing better than the more simplistic model because it has greater predictive confidence. Of the < 5000 stars that are misclasified, 193 of them are misclassified with a confidence > 80%. This is a small number of confident false-positives, but it signals that the model is starting to overfit the data that it is given, and therefore it is having difficulty generalizing to new data.\n",
    "\n",
    "*Note: The length of my misclassified dataframe, cp, is longer than the number of any of the validation false postives for any single epoch listed in info2, and it is shorter than the combined total of the false positives from each epoch. The false_postive metric is counting the false postive weights in each epoch, so I expect cp to be of a similar length to the number of validation false positives per epoch. I have gone through my for loop and commented what I understand each line to do, and at the moment I am not sure why there is a discrepancy."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
